//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/BallControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BallControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BallControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BallControls"",
    ""maps"": [
        {
            ""name"": ""MoveBall"",
            ""id"": ""f58a72b2-6800-46f9-ac40-c790945b5acd"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6d9ae0b9-a37f-4314-88c0-6f1a9d3cff2a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""ca4b8917-4062-4dcf-a139-64d28c5c106f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c282344a-77a1-4237-8e39-236e12a9671f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77b25ab5-8225-4cf0-9e04-0151517fc9e2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveBall
        m_MoveBall = asset.FindActionMap("MoveBall", throwIfNotFound: true);
        m_MoveBall_Move = m_MoveBall.FindAction("Move", throwIfNotFound: true);
        m_MoveBall_Press = m_MoveBall.FindAction("Press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveBall
    private readonly InputActionMap m_MoveBall;
    private List<IMoveBallActions> m_MoveBallActionsCallbackInterfaces = new List<IMoveBallActions>();
    private readonly InputAction m_MoveBall_Move;
    private readonly InputAction m_MoveBall_Press;
    public struct MoveBallActions
    {
        private @BallControls m_Wrapper;
        public MoveBallActions(@BallControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveBall_Move;
        public InputAction @Press => m_Wrapper.m_MoveBall_Press;
        public InputActionMap Get() { return m_Wrapper.m_MoveBall; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveBallActions set) { return set.Get(); }
        public void AddCallbacks(IMoveBallActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveBallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveBallActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(IMoveBallActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(IMoveBallActions instance)
        {
            if (m_Wrapper.m_MoveBallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveBallActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveBallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveBallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveBallActions @MoveBall => new MoveBallActions(this);
    public interface IMoveBallActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
    }
}
